/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
    };

    combos {
        compatible = "zmk,combos";

        QuestionMark {
            bindings = <&kp PLUS>;
            key-positions = <41 34>;
        };

        gravesf {
            bindings = <&kp SQT>;
            key-positions = <41 23>;
        };

        Ctrencada {
            bindings = <&kp BACKSLASH>;
            key-positions = <26 41>;
        };

        cierre {
            bindings = <&kp LA(F4)>;
            key-positions = <38 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R  &kp T           &kp Y      &kp U  &kp I      &kp O    &kp P      &kp BSPC
&kp LEFT_SHIFT    &kp A  &kp S  &kp D     &kp F  &kp G           &kp H      &kp J  &kp K      &kp L    &kp SEMI   &kp ENTER
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C     &kp V  &kp B           &kp N      &kp M  &kp COMMA  &kp DOT  &kp MINUS  &kp SQT
                                &kp LGUI  &mo 1  &kp LEFT_ALT    &kp SPACE  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB           &kp N1      &kp N2            &kp N3         &kp N4                    &kp N5                  &kp N6            &kp N7         &kp N8          &kp N9      &kp N0                &kp BSPC
&kp LEFT_SHIFT    &kp CAPS    &kp LS(SLASH)     &kp LS(MINUS)  &kp NON_US_BACKSLASH      &kp LS(LEFT_BRACKET)    &kp UP_ARROW      &kp DOWN       &kp LEFT_ARROW  &kp RIGHT   &kp RA(LEFT_BRACKET)  &kp RA(RBKT)
&kp LEFT_CONTROL  &kp ESCAPE  &kp LS(NUMBER_3)  &kp LS(EQUAL)  &kp LS(NON_US_BACKSLASH)  &kp LS(NUMBER_2)        &kp LS(NUMBER_7)  &kp RA(GRAVE)  &kp LS(N8)      &kp LS(N9)  &kp RA(SQT)           &kp RA(BACKSLASH)
                                                &kp LGUI       &trans                    &kp LEFT_ALT            &kp SPACE         &trans         &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB           &kp LS(NUMBER_1)  &kp RA(NUMBER_2)  &kp RA(NUMBER_3)  &kp LS(NUMBER_4)          &kp LS(N5)              &kp LS(NUMBER_6)  &kp RIGHT_BRACKET  &kp SLASH       &kp LS(RIGHT_BRACKET)  &kp LS(N0)            &kp RA(NUMBER_4)
&kp LEFT_SHIFT    &kp CAPS          &kp LS(SLASH)     &kp LS(MINUS)     &kp NON_US_BACKSLASH      &kp LS(LEFT_BRACKET)    &kp UP_ARROW      &kp DOWN_ARROW     &kp LEFT_ARROW  &kp RIGHT              &kp RA(LEFT_BRACKET)  &kp RA(RIGHT_BRACKET)
&kp LEFT_CONTROL  &kp ESCAPE        &kp LS(NUMBER_3)  &kp LS(EQUAL)     &kp LS(NON_US_BACKSLASH)  &kp LS(NUMBER_2)        &kp LS(N7)        &kp RA(GRAVE)      &kp LS(N8)      &kp LS(N9)             &kp RA(SQT)           &kp RA(BACKSLASH)
                                                      &kp LGUI          &trans                    &kp LEFT_ALT            &kp SPACE         &trans             &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&kp F1            &kp F2              &kp F3            &kp F4         &kp F5        &kp F6           &kp F7         &kp F8           &kp F9      &kp F10           &kp F11     &kp F12
&kp LEFT_SHIFT    &bt BT_CLR          &bt BT_SEL 0      &bt BT_SEL 1   &bt BT_SEL 2  &bt BT_SEL 3     &kp PAGE_UP    &kp DEL          &kp INSERT  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_VOLUME_UP
&kp LEFT_CONTROL  &kp LC(LA(ESCAPE))  &kp RA(NUMBER_6)  &kp BACKSLASH  &kp GRAVE     &kp LS(GRAVE)    &kp PAGE_DOWN  &kp PRINTSCREEN  &kp END     &kp C_MUTE        &kp C_PREV  &kp C_VOL_DN
                                                        &trans         &trans        &kp LEFT_ALT     &kp SPACE      &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        TriLayer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
